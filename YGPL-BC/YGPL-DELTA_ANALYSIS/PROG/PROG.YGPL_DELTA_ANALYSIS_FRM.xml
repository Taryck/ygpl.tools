<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="DC9C7CB5CC36C66C1DDABA531B3078CA" CODE_SIGNATURE="8CC94FBAC1508259FC61A554911C7D76" CONNECTOR="AAAD0A4B07A5A05AE1000000AC120173" NAME="YGPL_DELTA_ANALYSIS_FRM" TYPE="PROG" VERSION="1.0">
 <DIRECTORY DEVCLASS="YGPL-DELTA_ANALYSIS" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VARCL="X" SUBC="I" APPL="S" LEVL="701" RMAND="220" RLOAD="E" UCCHECK="X"/>
  <SOURCE>`
*---------------------------------------------------------------------*
*  Include           ZAPLINK_FRM
*---------------------------------------------------------------------*
  DEFINE mac_replace.
    replace all occurrences of regex &apos;&lt;:&amp;2:&gt;&apos; in &amp;1 with sy-&amp;2.
  END-OF-DEFINITION.
*/---------------------writeMessage-----------------------\
  FORM writemessage USING value(p_type) TYPE sy-msgty
                          value(p_msg).
    CASE p_type.
      WHEN &apos;E&apos; OR &apos;A&apos; OR &apos;X&apos;.
        WRITE / icon_red_light AS ICON.
      WHEN &apos;W&apos;.
        WRITE / icon_yellow_light AS ICON.
      WHEN &apos;S&apos;.
        WRITE / icon_green_light AS ICON.
      WHEN OTHERS.
        WRITE / icon_light_out AS ICON. &quot; ICON_ARROW_RIGHT
    ENDCASE.

    WRITE p_msg.
  ENDFORM.                    &quot;WriteMessage
**&amp;---------------------------------------------------------------------*
**&amp;      Form  DSP_RESULT_DISPLAY
**&amp;---------------------------------------------------------------------*
*  FORM dsp_result_display USING name TYPE td_name
*                             objlist TYPE t_objlist
*                              offset TYPE string.
*    DATA msg    TYPE string.
*    DATA t_comp TYPE t_comp.
*    DATA _type  TYPE t_obj_type.
*    DATA _name  TYPE t_obj_name.
*    DATA _act   TYPE zaplink_component=&gt;td_action.
*    DATA o_cx   TYPE REF TO zaplink_cx.
*    DATA _cx    TYPE t_exception.
*    DATA _msg_col TYPE t_msg_col.
*    DATA _subc  TYPE t_objlist.
*    DATA _offset TYPE string.
*    CONSTANTS s_inc TYPE string VALUE `  `.
*
*    IF NOT name IS INITIAL.
*      WRITE: / &apos;Object list for Container &apos;(001), name. SKIP.
*    ENDIF.
*    TRY.
*        IF objlist IS BOUND.
*          objlist-&gt;display_progress = abap_false.
*          objlist-&gt;init_iter( ).
*          t_comp = objlist-&gt;get_next( ).
*        ENDIF.
*        IF NOT name IS INITIAL AND NOT t_comp IS BOUND.
*          PERFORM writemessage USING &apos;W&apos; &apos;You have an empty Container&apos;(002).
*          EXIT.
*        ENDIF.
*
*        CONCATENATE offset s_inc INTO _offset.
*
*        WHILE t_comp IS BOUND.
*          _type = t_comp-&gt;get_type( ).
*          _name = t_comp-&gt;get_name( ).
*          _act  = t_comp-&gt;get_action( ).
*
*          IF t_comp-&gt;connector_exists( ) = zaplink_gui=&gt;exists-not_exists.
*            CONCATENATE offset _type &apos;-&apos; _name &apos;no connector&apos;(nco)
*                INTO msg SEPARATED BY space.
*            PERFORM writemessage USING &apos;E&apos; msg.
*          ELSEIF objlist-&gt;is_selected( t_comp ) = abap_false.
*            CONCATENATE offset _type &apos;-&apos; _name &apos;not requested&apos;(nre)
*                INTO msg SEPARATED BY space.
*            PERFORM writemessage USING &apos;I&apos; msg.
*          ELSE.
*
*            _cx = t_comp-&gt;get_exception( ).
*            _msg_col = t_comp-&gt;get_msg_coll( ).
*            IF _msg_col IS BOUND.
*              IF _msg_col-&gt;has_messages_of_msgt( &apos;E&apos; ) = abap_false .
*                CLEAR _msg_col.
*              ENDIF.
*            ENDIF.
*            IF _cx IS BOUND OR _msg_col IS BOUND.
*              CONCATENATE offset _type &apos;-&apos; _name &apos;FAILED&apos;(fai)
*                  INTO msg SEPARATED BY space.
*              PERFORM writemessage USING &apos;E&apos; msg.
*              IF _cx IS BOUND.
*                _cx-&gt;write( ).
*                _msg_col = t_comp-&gt;get_msg_coll( ).
*                IF _msg_col IS BOUND.
*                  _msg_col-&gt;write( ).
*                ENDIF.
*              ELSE.
*                IF _msg_col IS BOUND.
*                  _msg_col-&gt;write( ).
*                ENDIF.
*              ENDIF.
*            ELSE.
*              IF _act = zaplink_list=&gt;sel_actions-activated.
*                CONCATENATE offset _type &apos;-&apos; _name &apos;SUCCEED &amp; Activated&apos;(sac)
*                    INTO msg SEPARATED BY space.
*                PERFORM writemessage USING &apos;S&apos; msg.
*              ELSEIF _act = zaplink_list=&gt;sel_actions-not_active.
*                CONCATENATE offset _type &apos;-&apos; _name &apos;SUCCEED but NOT activated&apos;(sin)
*                    INTO msg SEPARATED BY space.
*                PERFORM writemessage USING &apos;W&apos; msg.
*              ELSE.
*                CONCATENATE offset _type &apos;-&apos; _name &apos;SUCCEED&apos;(suc)
*                    INTO msg SEPARATED BY space.
*                PERFORM writemessage USING &apos;S&apos; msg.
*              ENDIF.
*              _msg_col = t_comp-&gt;get_msg_coll( ).
*              IF _msg_col IS BOUND.
*                IF _msg_col-&gt;has_messages_of_msgt( &apos;W&apos; ) = abap_true .
*                  _msg_col-&gt;write( ).
*                ENDIF.
*              ENDIF.
*            ENDIF.
*          ENDIF.
*
*          _subc = t_comp-&gt;get_subcomponents( ).
*          IF _subc IS BOUND.
*            PERFORM dsp_result_display USING space _subc _offset.
*          ENDIF.
*
*          t_comp = objlist-&gt;get_next( ).
*        ENDWHILE.
*      CATCH zaplink_cx INTO o_cx.
*        o_cx-&gt;write( ).
*    ENDTRY.
*
*  ENDFORM.                    &quot; DSP_RESULT_DISPLAY
*&amp;---------------------------------------------------------------------*
*&amp;      Form  auto
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM auto.
    DATA _keys TYPE zaplink_gui=&gt;tt_compkeys.

    TRY.
        _keys = zaplink_gui=&gt;get_keys_from_tadir( srcsystem = s_srcs[]
                                                       type = s_type[]
                                                       name = s_name[]
                                                   packages = s_pack[]
                                                        ext = p_ext
                                                     author = s_author[] ).
* No component was selected with this parameters
        IF _keys  IS INITIAL.   MESSAGE s054.   EXIT.   ENDIF.

        d_name = &apos;c_name&apos;.
        mac_replace d_name: uname, sysid, datum, uzeit.
        IF d_name IS INITIAL. CONCATENATE sy-datum sy-uzeit INTO d_name. ENDIF.
        CALL METHOD zaplink_gui=&gt;create
          EXPORTING
            name = d_name
            file = o_file.

        CREATE OBJECT objlist.
        objlist-&gt;add_keys( _keys ).
        objlist-&gt;select_default( zaplink_list=&gt;sel_actions-export ).
        objlist-&gt;change_selection( ).

        CALL METHOD zaplink_gui=&gt;export
          EXPORTING
            file         = o_file
            with_subcomp = f_sub
          CHANGING
            objlist      = objlist.
      CATCH zaplink_cx INTO o_exception.
        o_exception-&gt;write( ).
        EXIT.
    ENDTRY.

*    PERFORM dsp_result_display USING space objlist space.

  ENDFORM.                    &quot; auto
*&amp;---------------------------------------------------------------------*
*&amp;      Form  add
*&amp;---------------------------------------------------------------------*
  FORM refresh .

    TRY.
        objlist = zaplink_gui=&gt;refresh( file = o_file
                                with_subcomp = f_sub ).
      CATCH zaplink_cx INTO o_exception.
        o_exception-&gt;write( ).
        EXIT.
    ENDTRY.

*    PERFORM dsp_result_display USING space objlist space.

  ENDFORM.                    &quot; add
*&amp;---------------------------------------------------------------------*
*&amp;      Form  add
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
  FORM add .
    DATA _keys TYPE zaplink_gui=&gt;tt_compkeys.

    TRY.
        _keys = zaplink_gui=&gt;get_keys_from_tadir( srcsystem = s_srcs[]
                                                       type = s_type[]
                                                       name = s_name[]
                                                   packages = s_pack[]
                                                        ext = p_ext
                                                     author = s_author[] ).
* No component was selected with this parameters
        IF _keys  IS INITIAL.   MESSAGE s054.   EXIT.   ENDIF.
        CREATE OBJECT objlist.
        objlist-&gt;add_keys( _keys ).
        zaplink_gui=&gt;change_selection( action = zaplink_list=&gt;sel_actions-export
                                         list = objlist ).

        CALL METHOD zaplink_gui=&gt;export
          EXPORTING
            file         = o_file
            with_subcomp = f_sub
          CHANGING
            objlist      = objlist.
      CATCH zaplink_cx INTO o_exception.
        o_exception-&gt;write( ).
        EXIT.
    ENDTRY.

*    PERFORM dsp_result_display USING space objlist space.

  ENDFORM.                    &quot; add
*&amp;---------------------------------------------------------------------*
*&amp;      Form  add_comp
*&amp;---------------------------------------------------------------------*
  FORM add_comp.
    DATA o_comp    TYPE zaplink_gui=&gt;to_component.

    CHECK NOT co_type IS INITIAL AND NOT co_name IS INITIAL.

    TRY.
        CREATE OBJECT: o_comp, objlist.
        o_comp-&gt;set_type( co_type ).    o_comp-&gt;set_name( co_name ).
        IF o_comp-&gt;connector_exists( ) &lt;&gt; zaplink_gui=&gt;exists-exists.
* There is no ZAPLink connector installed for object type &apos;&amp;1&apos;
          MESSAGE i050 WITH co_type.
          EXIT.
        ENDIF.
        IF o_comp-&gt;do_exists( ) &lt;&gt; zaplink_gui=&gt;exists-exists.
* Component &apos;&amp;2&apos; (object type &apos;&amp;1&apos;) does not exists
          MESSAGE i052 WITH co_type co_name.
          EXIT.
        ENDIF.
        objlist-&gt;add( o_comp ).
        objlist-&gt;select_all( ).

        CALL METHOD zaplink_gui=&gt;export
          EXPORTING
            file         = o_file
            with_subcomp = f_sub
          CHANGING
            objlist      = objlist.
      CATCH zaplink_cx INTO o_exception.
        o_exception-&gt;write( ).
        EXIT.
    ENDTRY.

*    PERFORM dsp_result_display USING space objlist space.

  ENDFORM.                    &quot; add_package
*&amp;---------------------------------------------------------------------*
*&amp;      Form  add_tr
*&amp;---------------------------------------------------------------------*
  FORM add_tr using r_tr type zaplink_gui=&gt;tr_tr
           CHANGING keys type zaplink_gui=&gt;tt_compkeys.

    IF r_tr[] IS INITIAL.
      MESSAGE i000(0k) WITH &apos;Transport Request required&apos;(003).
      EXIT.
    ENDIF.

    TRY.
        keys = zaplink_gui=&gt;get_keys_from_tr( r_tr ).

      CATCH zaplink_cx INTO o_exception.
        o_exception-&gt;write( ).
        EXIT.
    ENDTRY.

  ENDFORM.                    &quot; add_tr</SOURCE>
  <TEXTSPOOL>
   <ITEM ID="R">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="Include ZAPLINK_FRM" LENGTH="19 "/>
    </TEXTS>
   </ITEM>
  </TEXTSPOOL>
 </RAW>
</ZL_OBJECT>
