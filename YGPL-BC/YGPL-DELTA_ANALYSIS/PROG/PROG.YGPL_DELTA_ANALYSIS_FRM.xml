<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="DFF7B653729E85C672C194CEB0790E5A" CODE_SIGNATURE="35652730E4122DAF21C08DB0E3DF9335" CONNECTOR="AAAD0A4B07A5A05AE1000000AC120173" NAME="YGPL_DELTA_ANALYSIS_FRM" TYPE="PROG" VERSION="1.0">
 <DIRECTORY DEVCLASS="YGPL-DELTA_ANALYSIS" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VARCL="X" SUBC="I" APPL="S" LEVL="701" RMAND="220" RLOAD="E" UCCHECK="X"/>
  <SOURCE>`
*---------------------------------------------------------------------*
*  Include           ZAPLINK_FRM
*---------------------------------------------------------------------*
DEFINE mac_replace.
  replace all occurrences of regex &apos;&lt;:&amp;2:&gt;&apos; in &amp;1 with sy-&amp;2.
END-OF-DEFINITION.
*/---------------------writeMessage-----------------------\
FORM writemessage USING value(p_type) TYPE sy-msgty
                        value(p_msg).
  CASE p_type.
    WHEN &apos;E&apos; OR &apos;A&apos; OR &apos;X&apos;.
      WRITE / icon_red_light AS ICON.
    WHEN &apos;W&apos;.
      WRITE / icon_yellow_light AS ICON.
    WHEN &apos;S&apos;.
      WRITE / icon_green_light AS ICON.
    WHEN OTHERS.
      WRITE / icon_light_out AS ICON. &quot; ICON_ARROW_RIGHT
  ENDCASE.

  WRITE p_msg.
ENDFORM.                    &quot;WriteMessage
*&amp;---------------------------------------------------------------------*
*&amp;      Form  add
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM add .
  DATA _keys TYPE zaplink_gui=&gt;tt_compkeys.

  TRY.
      _keys = zaplink_gui=&gt;get_keys_from_tadir( srcsystem = s_srcs[]
                                                     type = s_type[]
                                                     name = s_name[]
                                                 packages = s_pack[]
                                                      ext = p_ext
                                                   author = s_author[] ).
* No component was selected with this parameters
      IF _keys  IS INITIAL.   MESSAGE s054.   EXIT.   ENDIF.
      objlist-&gt;add_keys( _keys ).

    CATCH zaplink_cx INTO o_exception.
      o_exception-&gt;write( ).
      EXIT.
  ENDTRY.

*    PERFORM dsp_result_display USING space objlist space.

ENDFORM.                    &quot; add
*&amp;---------------------------------------------------------------------*
*&amp;      Form  add_comp
*&amp;---------------------------------------------------------------------*
FORM add_comp.
  DATA o_comp    TYPE zaplink_gui=&gt;to_component.

  CHECK NOT co_type IS INITIAL AND NOT co_name IS INITIAL.

  TRY.
      CREATE OBJECT o_comp.
      o_comp-&gt;set_type( co_type ).    o_comp-&gt;set_name( co_name ).
      IF o_comp-&gt;connector_exists( ) &lt;&gt; zaplink_gui=&gt;exists-exists.
* There is no ZAPLink connector installed for object type &apos;&amp;1&apos;
        MESSAGE i050 WITH co_type.
        EXIT.
      ENDIF.
      IF o_comp-&gt;do_exists( ) &lt;&gt; zaplink_gui=&gt;exists-exists.
* Component &apos;&amp;2&apos; (object type &apos;&amp;1&apos;) does not exists
        MESSAGE i052 WITH co_type co_name.
        EXIT.
      ENDIF.
      objlist-&gt;add( o_comp ).

    CATCH zaplink_cx INTO o_exception.
      o_exception-&gt;write( ).
      EXIT.
  ENDTRY.

*    PERFORM dsp_result_display USING space objlist space.

ENDFORM.                    &quot; add_package
*&amp;---------------------------------------------------------------------*
*&amp;      Form  add_tr
*&amp;---------------------------------------------------------------------*
FORM add_tr USING r_tr TYPE zaplink_gui=&gt;tr_tr.
  DATA _keys TYPE zaplink_gui=&gt;tt_compkeys.

  IF r_tr[] IS INITIAL.
    MESSAGE i000(0k) WITH &apos;Transport Request required&apos;(003).
    EXIT.
  ENDIF.

  TRY.
      _keys = zaplink_gui=&gt;get_keys_from_tr( r_tr ).
* No component was selected with this parameters
      IF _keys  IS INITIAL.   MESSAGE s054.   EXIT.   ENDIF.
      objlist-&gt;add_keys( _keys ).

    CATCH zaplink_cx INTO o_exception.
      o_exception-&gt;write( ).
      EXIT.
  ENDTRY.

ENDFORM.                    &quot; add_tr
*&amp;---------------------------------------------------------------------*
*&amp;      Form  bdc_dynpro
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;PROGRAM    text
*      --&gt;DYNPRO     text
*----------------------------------------------------------------------*
FORM bdc_dynpro USING program dynpro.
  CLEAR bdcdata.
  bdcdata-program  = program.
  bdcdata-dynpro   = dynpro.
  bdcdata-dynbegin = &apos;X&apos;.
  APPEND bdcdata.
ENDFORM.                    &quot;BDC_DYNPRO

*&amp;---------------------------------------------------------------------*
*&amp;      Form  bdc_field
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;FNAM       text
*      --&gt;FVAL       text
*----------------------------------------------------------------------*
FORM bdc_field USING fnam fval.
  CLEAR bdcdata.
  bdcdata-fnam = fnam.
  bdcdata-fval = fval.
  APPEND bdcdata.
ENDFORM.                    &quot;BDC_FIELD
*&amp;---------------------------------------------------------------------*
*&amp;      Form  CREATE_OBJECT_LIST
*&amp;---------------------------------------------------------------------*
FORM create_object_list .
  CREATE OBJECT objlist.
  CASE abap_true.
    WHEN a_add.       PERFORM add.          &quot; add object to Container
    WHEN a_add_p.     PERFORM add_comp.
    WHEN a_add_tr.    PERFORM add_tr USING p_tr[].
  ENDCASE.

* Allow user to refine object list
*        zaplink_gui=&gt;change_selection( action = zaplink_list=&gt;sel_actions-export
*                                         list = objlist ).
  objlist-&gt;select_default( zaplink_list=&gt;sel_actions-export ).
  objlist-&gt;change_selection( ).
ENDFORM.                    &quot; CREATE_OBJECT_LIST
*&amp;---------------------------------------------------------------------*
*&amp;      Form  GET_COMPONENTS
*&amp;---------------------------------------------------------------------*
FORM get_components .
  DATA keys             TYPE zaplink_gui=&gt;tt_compkeys.
  DATA o_list           TYPE to_objlist.
  DATA components_list  TYPE  zaplink_components_list.
  DATA s_comp           LIKE LINE OF components_list.
  FIELD-SYMBOLS:
    &lt;c&gt; LIKE LINE OF keys.

  o_list = objlist-&gt;selection_as_list( ).
  keys = o_list-&gt;get_keys( ).
  LOOP AT keys ASSIGNING &lt;c&gt;.
    MOVE-CORRESPONDING &lt;c&gt; TO s_comp.
    APPEND s_comp TO components_list.
  ENDLOOP.
  SORT components_list. DELETE ADJACENT DUPLICATES FROM components_list.
  IF components_list IS INITIAL.
    EXIT.
  ENDIF.

* Get local components
  CALL FUNCTION &apos;ZAPLINK_GET_COMPONENTS&apos;
    EXPORTING
      components_list = components_list
    IMPORTING
      definitions     = t_def_loc.

* Remote call
  CALL FUNCTION &apos;ZAPLINK_GET_COMPONENTS&apos;
    DESTINATION p_rfc
    EXPORTING
      components_list = components_list
    IMPORTING
      definitions     = t_def_dis.
ENDFORM.                    &quot; GET_COMPONENTS
*&amp;---------------------------------------------------------------------*
*&amp;      Form  DISPLAY_LIST
*&amp;---------------------------------------------------------------------*
FORM display_list.
  DATA s_result LIKE LINE OF t_results.
  DATA s_layout TYPE slis_layout_alv.
  DATA s_exit   TYPE slis_exit_by_user.
  FIELD-SYMBOLS:
    &lt;rl&gt; LIKE LINE OF t_def_loc,
    &lt;rd&gt; LIKE LINE OF t_def_loc.

  REFRESH t_results.
  LOOP AT t_def_loc ASSIGNING &lt;rl&gt;.
    CLEAR s_result.
    MOVE-CORRESPONDING &lt;rl&gt; TO s_result.
    s_result-select = abap_true.
    READ TABLE t_def_dis ASSIGNING &lt;rd&gt;
         WITH TABLE KEY type = s_result-type
                        name = s_result-name.
    IF sy-subrc = 0.
      s_result-t_checksum = &lt;rd&gt;-checksum.
      s_result-t_code_signature = &lt;rd&gt;-code_signature.
    ELSE.
      s_result-icon = icon_absence.
    ENDIF.
    IF s_result-icon IS INITIAL.
      IF  s_result-t_checksum = s_result-checksum
      AND s_result-t_code_signature = s_result-code_signature.
        CLEAR s_result-select.
        s_result-icon = icon_equal_green.
      ELSEIF s_result-t_code_signature = s_result-code_signature AND s_result-code_signature IS NOT INITIAL.
        s_result-icon = icon_translation.
      ELSE.
        s_result-icon = icon_not_equal_red.
      ENDIF.
    ENDIF.

    APPEND s_result TO t_results.

  ENDLOOP.

  s_layout-box_fieldname = &apos;SELECT&apos;.
  READ TABLE t_fields TRANSPORTING NO FIELDS WITH KEY fieldname = s_layout-box_fieldname.
  ASSERT sy-subrc = 0.    &quot; missing select fields
  s_layout-colwidth_optimize = abap_true.

  CALL FUNCTION &apos;REUSE_ALV_GRID_DISPLAY&apos;
    EXPORTING
      i_callback_program       = &apos;YGPL_DELTA_ANALYSIS&apos;
      i_callback_pf_status_set = &apos;PF_STATUS_SET&apos;
      i_callback_user_command  = &apos;USER_COMMAND_USER&apos;
      i_grid_title             = &apos;Select objects to compare&apos;(lst)
      it_fieldcat              = t_fields
      is_layout                = s_layout
    IMPORTING
      es_exit_caused_by_user   = s_exit
    TABLES
      t_outtab                 = t_results
    EXCEPTIONS
      OTHERS                   = 0.
  IF s_exit IS NOT INITIAL.
    REFRESH t_results.
    gv_exit = abap_true.
  ENDIF.
ENDFORM.                    &quot; DISPLAY_LIST

*&amp;---------------------------------------------------------------------*
*&amp;      Form  pf_status_set
*&amp;---------------------------------------------------------------------*
FORM pf_status_set USING rt_extab TYPE slis_t_extab.
  SET PF-STATUS &apos;ANALYSE&apos; OF PROGRAM &apos;YGPL_DELTA_ANALYSIS&apos; EXCLUDING rt_extab.
ENDFORM.                    &quot;pf_status_set

*&amp;---------------------------------------------------------------------*
*&amp;      Form  user_command_user
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      --&gt;R_UCOMM      text
*      --&gt;RS_SELFIELD  text
*----------------------------------------------------------------------*
FORM user_command_user USING r_ucomm LIKE sy-ucomm
                  rs_selfield TYPE slis_selfield.
  FIELD-SYMBOLS:
    &lt;s&gt; LIKE LINE OF t_def_loc,
    &lt;t&gt; LIKE LINE OF t_def_dis,
    &lt;r&gt; LIKE LINE OF t_results.

  rs_selfield-exit = &apos;X&apos;.
  CASE r_ucomm.
    WHEN c_act_exit.
      LOOP AT t_results ASSIGNING &lt;r&gt;       &quot; remove selection
           WHERE select = abap_true.
        CLEAR &lt;r&gt;-select.
      ENDLOOP.
      gv_exit = abap_true.
    WHEN c_act_display.
      LOOP AT t_results ASSIGNING &lt;r&gt;
           WHERE select = abap_true.
        READ TABLE t_def_loc ASSIGNING &lt;s&gt;
             WITH TABLE KEY type = &lt;r&gt;-type
                            name = &lt;r&gt;-name.
        ASSERT sy-subrc = 0.
        READ TABLE t_def_dis ASSIGNING &lt;t&gt;
             WITH TABLE KEY type = &lt;r&gt;-type
                            name = &lt;r&gt;-name.
        CHECK sy-subrc = 0.   &quot; user selected a component that do not exists on target system

      ENDLOOP.

    WHEN OTHERS.
      CLEAR rs_selfield-exit.
  ENDCASE.
ENDFORM.                    &quot;user_command_user
*&amp;---------------------------------------------------------------------*
*&amp;      Form  DISPLAY_DELTA_DETAILS
*&amp;---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  --&gt;  p1        text
*  &lt;--  p2        text
*----------------------------------------------------------------------*
FORM display_delta_details .
  DATA s_src      TYPE string.
  DATA s_dst      TYPE string.
  DATA o_prog_src TYPE REF TO zaplink_prog_data_local. &quot;loc.
  DATA o_prog_dst TYPE REF TO zaplink_prog_data_local. &quot;loc.
  DATA o_raw      TYPE REF TO zaplink_raw.
  DATA o_conn     TYPE REF TO zaplink_program.
  DATA o_comp     TYPE REF TO zaplink_component.
  DATA messtab    LIKE bdcmsgcoll OCCURS 0 WITH HEADER LINE.
  FIELD-SYMBOLS:
    &lt;rl&gt;  LIKE LINE OF t_def_loc,
    &lt;rd&gt;  LIKE LINE OF t_def_loc,
    &lt;i&gt;   LIKE LINE OF t_results.

  LOOP AT t_results ASSIGNING &lt;i&gt;
       WHERE select = abap_true.
    READ TABLE t_def_loc ASSIGNING &lt;rl&gt;
         WITH TABLE KEY type = &lt;i&gt;-type
                        name = &lt;i&gt;-name.
    CHECK sy-subrc = 0.
    READ TABLE t_def_dis ASSIGNING &lt;rd&gt;
         WITH TABLE KEY type = &lt;i&gt;-type
                        name = &lt;i&gt;-name.
    CHECK sy-subrc = 0.
    CONCATENATE s_src cl_abap_char_utilities=&gt;newline &lt;rl&gt;-content INTO s_src.
    CONCATENATE s_dst cl_abap_char_utilities=&gt;newline &lt;rd&gt;-content INTO s_dst.
  ENDLOOP.

  IF sy-subrc &lt;&gt; 0.   &quot; no data
    EXIT.
  ENDIF.

  CREATE OBJECT o_prog_src.
  CREATE OBJECT o_prog_dst.
  o_prog_src-&gt;add_source_code( s_src ).
  o_prog_dst-&gt;add_source_code( s_dst ).
  o_prog_src-&gt;load_from_data( ).
  o_prog_dst-&gt;load_from_data( ).
  CREATE OBJECT o_conn.
  CREATE OBJECT o_comp.
  o_comp-&gt;set_type( &apos;PROG&apos; ).
  o_comp-&gt;set_name( o_prog_src-&gt;_my_progname ).
  CREATE OBJECT o_raw
    EXPORTING
      o_comp = o_comp.
  o_raw-&gt;raw = o_prog_src.
  o_conn-&gt;zaplink_connector~write_to_sap( o_raw ).
  o_comp-&gt;set_name( o_prog_dst-&gt;_my_progname ).
  o_raw-&gt;raw = o_prog_dst.
  o_raw-&gt;set_component( o_comp ).       &quot; To act change of program name
  o_conn-&gt;zaplink_connector~write_to_sap( o_raw ).

  COMMIT WORK AND WAIT.

  REFRESH bdcdata.
  PERFORM bdc_dynpro      USING &apos;SAPLS_WB_SPLIT_EDITOR_INITIAL&apos; &apos;0220&apos;.
  PERFORM bdc_field       USING &apos;BDC_CURSOR&apos;
                                &apos;RSEDR-REPID&apos;.
  PERFORM bdc_field       USING &apos;BDC_OKCODE&apos;
                                &apos;=DISP&apos;.
  PERFORM bdc_field       USING &apos;RSEDL-FLG_PROG&apos;
                                &apos;X&apos;.
  PERFORM bdc_field       USING &apos;RSEDL-REPID&apos;
                                o_prog_src-&gt;_my_progname.
  PERFORM bdc_field       USING &apos;RSEDL-FLG_DEFAUL&apos;
                                &apos;&apos;.
  PERFORM bdc_field       USING &apos;RSEDL-FLG_INACT&apos;
                                &apos;X&apos;.
  PERFORM bdc_field       USING &apos;RSEDR-FLG_PROG&apos;
                                &apos;X&apos;.
  PERFORM bdc_field       USING &apos;RSEDR-REPID&apos;
                                o_prog_dst-&gt;_my_progname.
  PERFORM bdc_field       USING &apos;RSEDR-FLG_DEFAUL&apos;
                                &apos;X&apos;.
  PERFORM bdc_dynpro      USING &apos;SAPLS_WB_SPLITCORE&apos; &apos;0100&apos;.
  PERFORM bdc_field       USING &apos;BDC_OKCODE&apos;
                                &apos;=EC_COMPARE&apos;.

*  PARAMETERS CTUMODE LIKE CTU_PARAMS-DISMODE DEFAULT &apos;N&apos;.
*                                      &quot;A: show all dynpros
*                                      &quot;E: show dynpro on error only
*                                      &quot;N: do not display dynpro
*  PARAMETERS CUPDATE LIKE CTU_PARAMS-UPDMODE DEFAULT &apos;L&apos;.
*                                      &quot;S: synchronously
*                                      &quot;A: asynchronously
*                                      &quot;L: local

  CALL TRANSACTION &apos;SE39&apos; USING bdcdata
*                MODE   CTUMODE
                   MODE   &apos;E&apos;
*                UPDATE CUPDATE
                   UPDATE &apos;L&apos;
                   MESSAGES INTO messtab.

  o_comp-&gt;set_name( o_prog_src-&gt;_my_progname ).
  IF o_conn-&gt;zaplink_connector~delete_from_sap( o_comp ) = abap_false.
    MESSAGE w118(33) WITH o_prog_src-&gt;_my_progname.
  ENDIF.
  o_comp-&gt;set_name( o_prog_dst-&gt;_my_progname ).
  IF o_conn-&gt;zaplink_connector~delete_from_sap( o_comp ) = abap_false.
    MESSAGE w118(33) WITH o_prog_src-&gt;_my_progname.
  ENDIF.

ENDFORM.                    &quot; DISPLAY_DELTA_DETAILS
*&amp;---------------------------------------------------------------------*
*&amp;      Form  GET_FIELDCAT
*&amp;---------------------------------------------------------------------*
FORM get_fieldcat .
  CALL FUNCTION &apos;REUSE_ALV_FIELDCATALOG_MERGE&apos;
    EXPORTING
*      i_program_name               = &apos;YGPL_DELTA_ANALYSIS&apos;
*      i_internal_tabname           = &apos;T_RESULTS&apos;
      i_structure_name             = &apos;YGPL_DELTA_ANALYSIS_RESULT&apos;
*     I_CLIENT_NEVER_DISPLAY       = &apos;X&apos;
*     I_INCLNAME                   =
*     I_BYPASSING_BUFFER           =
*     I_BUFFER_ACTIVE              =
    CHANGING
      ct_fieldcat                  = t_fields
    EXCEPTIONS
      inconsistent_interface       = 1
      program_error                = 2
      OTHERS                       = 3.
  IF sy-subrc &lt;&gt; 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
            WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.
ENDFORM.                    &quot; GET_FIELDCAT</SOURCE>
  <TEXTSPOOL>
   <ITEM ID="R">
    <TEXTS>
     <ITEM LANGU="E" ENTRY="Include ZAPLINK_FRM" LENGTH="19 "/>
    </TEXTS>
   </ITEM>
  </TEXTSPOOL>
 </RAW>
</ZL_OBJECT>
