<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="A351AD756E47D7FEEA550C2D3E212A05" CODE_SIGNATURE="32FFB06EC10CF8C2CEEC41FF2EFD1FBD" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="YGPL_MT_CATEGORIES" TYPE="CLAS" VERSION="1.01">
 <DIRECTORY DEVCLASS="YGPL-MULTITHREAD" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" CLSCCINCL="X" FIXPT="X" UNICODE="X">
   <TEXTS>
    <ITEM LANG="E" TEXT="Status des enregistrements MT"/>
   </TEXTS>
  </A0_MAINDATA>
  <ALIASES>
   <ITEM CMPNAME="SYS_CATEGORIES" EXPOSURE="2" REFCLSNAME="YGPL_MT_TYPES" REFCMPNAME="SYS_CATEGORIES"/>
   <ITEM CMPNAME="TD_BOOLEAN" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="YGPL_MT_TYPES" REFCMPNAME="TD_BOOLEAN"/>
   <ITEM CMPNAME="TD_CATEGORY" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="YGPL_MT_TYPES" REFCMPNAME="TD_CATEGORY"/>
   <ITEM CMPNAME="TD_DATA_TYPE" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="YGPL_MT_TYPES" REFCMPNAME="TD_DATA_TYPE"/>
   <ITEM CMPNAME="TR_CATEGORIES" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="YGPL_MT_TYPES" REFCMPNAME="TR_CATEGORIES"/>
  </ALIASES>
  <ATTRIBUTS>
   <ITEM CMPNAME="ALL_KEYS" STATE="1" ATTDECLTYP="1" TYPTYPE="1" TYPE="TT_KEYS">
    <TEXTS>
     <ITEM LANG="E" TEXT="All Category&apos;s key list"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="MY_KEYS" STATE="1" TYPTYPE="1" TYPE="TT_CATEGORIES"/>
   <ITEM CMPNAME="R_SYS_CATEGORIES" EXPOSURE="2" STATE="1" ATTDECLTYP="1" ATTRDONLY="X" TYPTYPE="1" TYPE="TR_CATEGORIES">
    <TEXTS>
     <ITEM LANG="E" TEXT="System Categories"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <INTERFACES>
   <ITEM REFCLSNAME="YGPL_MT_TYPES" EXPOSURE="2" STATE="1" RELTYPE="1"/>
  </INTERFACES>
  <LOCAL>
   <TYPES>`
*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</TYPES>
   <IMPLEMENTATIONS>`
*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</IMPLEMENTATIONS>
   <MACROS>`
*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="ADD_SPECIFIC_CATEGORY" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Add a specific category to the list of possible category"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="CATEGORY" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_CATEGORY">
      <TEXTS>
       <ITEM LANG="E" TEXT="Category"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="DATA_TYPE" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DATA_TYPE" PAROPTIONL="X">
      <TEXTS>
       <ITEM LANG="E" TEXT="Category data type"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="YGPL_MT_CX" LANGU="E">
      <TEXTS>
       <ITEM LANG="E" TEXT="MultyThread : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
**********************************************************************
* Author : Al&apos;oustad Taryck BENSIALI (taryck.bensiali@gmail.com)     *
* Date : 2008 December                                               *
**********************************************************************
  DATA:
    wa LIKE LINE OF my_keys.
  FIELD-SYMBOLS:
    &lt;wa&gt; LIKE LINE OF my_keys.

  IF category IN r_sys_categories.
    RAISE EXCEPTION TYPE ygpl_mt_cx_category
          EXPORTING textid = ygpl_mt_cx_category=&gt;system_category
                  category = category.
  ENDIF.
  IF do_exists( category ) IS INITIAL.
    RAISE EXCEPTION TYPE ygpl_mt_cx_category
          EXPORTING textid = ygpl_mt_cx_category=&gt;category_do_not_exists
                  category = category.
  ENDIF.

  IF data_type IS INITIAL.
    wa-ok = abap_true.
  ELSE.
    wa-ok = is_data_type_ok( data_type ).
    IF wa-ok = abap_false.
      RAISE EXCEPTION TYPE ygpl_mt_cx_category
            EXPORTING textid = ygpl_mt_cx_category=&gt;category_do_not_exists
                   data_type = data_type.
    ENDIF.
  ENDIF.

  READ TABLE my_keys WITH TABLE KEY cat = category ASSIGNING &lt;wa&gt;.
  IF sy-subrc = 0.
    &lt;wa&gt;-ok = wa-ok.
    IF &lt;wa&gt;-ok = abap_true.
      &lt;wa&gt;-type = data_type.
    ENDIF.
  ELSE. &quot; unexpected but handled
    wa-cat = category.
    IF wa-ok = abap_true. wa-type = data_type. ENDIF.
    INSERT wa INTO TABLE my_keys.
    ASSERT sy-subrc = 0.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CLASS_CONSTRUCTOR" EXPOSURE="2" STATE="1" MTDTYPE="2" MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="CLASS_CONSTRUCTOR"/>
    </TEXTS>
    <SOURCE>`
**********************************************************************
* Author : Al&apos;oustad Taryck BENSIALI (taryck.bensiali@gmail.com)     *
* Date : 2008 December                                               *
**********************************************************************
  DATA _cat LIKE LINE OF r_sys_categories.

  _cat-sign = &apos;I&apos;. _cat-option = &apos;EQ&apos;.
*  _cat-low = sys_categories-data_bloc.    APPEND _cat TO r_sys_categories.  &quot; Data : bloc
  _cat-low = sys_categories-run_info.     APPEND _cat TO r_sys_categories.  &quot; Information Run
  _cat-low = sys_categories-obj_conf.     APPEND _cat TO r_sys_categories.  &quot; confirmation d&apos;objet
  _cat-low = sys_categories-task_def.     APPEND _cat TO r_sys_categories.  &quot; Information Run
  _cat-low = sys_categories-condition.    APPEND _cat TO r_sys_categories.  &quot; confirmation d&apos;objet

  SELECT category
    INTO TABLE all_keys
    FROM ygplmt_category.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="DO_EXISTS" EXPOSURE="2" STATE="1" MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Check that key exists"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="EXISTS" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_BOOLEAN">
      <TEXTS>
       <ITEM LANG="E" TEXT="&apos;X&apos; Exists &apos; &apos; non trouvé"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="KEY" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_CATEGORY">
      <TEXTS>
       <ITEM LANG="E" TEXT="Information / Message category"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
**********************************************************************
* Author : Al&apos;oustad Taryck BENSIALI (taryck.bensiali@gmail.com)     *
* Date : 2008 December                                               *
**********************************************************************
  READ TABLE all_keys WITH TABLE KEY key = key TRANSPORTING NO FIELDS.
  IF sy-subrc = 0.
    exists = abap_true.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="IS_DATA_TYPE_OK" STATE="1" MTDDECLTYP="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Controle que le type de donnée est OK"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="DATA_TYPE" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_DATA_TYPE">
      <TEXTS>
       <ITEM LANG="E" TEXT="Data type"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_BOOLEAN"/>
    </PARAMETERS>
    <SOURCE>`
**********************************************************************
* Author : Al&apos;oustad Taryck BENSIALI (taryck.bensiali@gmail.com)     *
* Date : 2008 December                                               *
**********************************************************************
  DATA _data TYPE REF TO data.

  TRY.
      CREATE DATA _data TYPE (data_type).
      result = abap_true.
    CATCH cx_sy_create_data_error.
      result = abap_false.
  ENDTRY.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="IS_SYSTEM_CATEGORY" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Is the category a system category ?"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="CATEGORY" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_CATEGORY">
      <TEXTS>
       <ITEM LANG="E" TEXT="Category"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_BOOLEAN">
      <TEXTS>
       <ITEM LANG="E" TEXT="Category is valid"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="YGPL_MT_CX" LANGU="E">
      <TEXTS>
       <ITEM LANG="E" TEXT="MultyThread : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  IF not category IN r_sys_categories.
    RAISE EXCEPTION TYPE ygpl_mt_cx_category
          EXPORTING textid = ygpl_mt_cx_category=&gt;not_system_category
                  category = category.
  ENDIF.
  IF do_exists( category ) IS INITIAL.
    RAISE EXCEPTION TYPE ygpl_mt_cx_category
          EXPORTING textid = ygpl_mt_cx_category=&gt;category_do_not_exists
                  category = category.
  ENDIF.
  result = abap_true.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="IS_VALID_CATEGORY" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Is the category valid ?"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="CATEGORY" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_CATEGORY">
      <TEXTS>
       <ITEM LANG="E" TEXT="Category"/>
      </TEXTS>
     </ITEM>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TD_BOOLEAN">
      <TEXTS>
       <ITEM LANG="E" TEXT="Category is valid"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="YGPL_MT_CX" LANGU="E">
      <TEXTS>
       <ITEM LANG="E" TEXT="MultyThread : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
**********************************************************************
* Author : Al&apos;oustad Taryck BENSIALI (taryck.bensiali@gmail.com)     *
* Date : 2008 December                                               *
**********************************************************************
  FIELD-SYMBOLS &lt;wa&gt; LIKE LINE OF my_keys.

  IF category IN r_sys_categories.
    RAISE EXCEPTION TYPE ygpl_mt_cx_category
          EXPORTING textid = ygpl_mt_cx_category=&gt;system_category
                  category = category.
  ENDIF.
  IF do_exists( category ) IS INITIAL.
    RAISE EXCEPTION TYPE ygpl_mt_cx_category
          EXPORTING textid = ygpl_mt_cx_category=&gt;category_do_not_exists
                  category = category.
  ENDIF.

  READ TABLE my_keys WITH TABLE KEY cat = category ASSIGNING &lt;wa&gt;.
  IF sy-subrc &lt;&gt; 0.
    RAISE EXCEPTION TYPE ygpl_mt_cx_category
          EXPORTING textid = ygpl_mt_cx_category=&gt;category_not_define
                  category = category.
  ENDIF.
  IF &lt;wa&gt;-ok = abap_false.
    RAISE EXCEPTION TYPE ygpl_mt_cx_category
          EXPORTING textid = ygpl_mt_cx_category=&gt;category_not_define
                  category = category.
  ENDIF.
  result = abap_true.</SOURCE>
   </ITEM>
  </METHODS>
  <TYPEGROUPS>
   <ITEM TYPEGROUP="ABAP" EXPLICIT="X"/>
  </TYPEGROUPS>
  <TYPES>
   <ITEM CMPNAME="TS_CATEGORY" STATE="1" EDITORDER="3 " TYPTYPE="4">BEGIN OF ts_category,
      cat   TYPE td_category,
      ok    TYPE td_boolean,
      type  TYPE td_data_type,
    END OF ts_category
`</ITEM>
   <ITEM CMPNAME="TS_KEY" STATE="1" EDITORDER="1 " TYPTYPE="4">BEGIN OF ts_key,
      key TYPE td_category,
    END OF ts_key
`</ITEM>
   <ITEM CMPNAME="TT_CATEGORIES" STATE="1" EDITORDER="4 " TYPTYPE="4">tt_categories TYPE SORTED TABLE OF ts_category WITH UNIQUE KEY cat
`</ITEM>
   <ITEM CMPNAME="TT_KEYS" STATE="1" EDITORDER="2 " TYPTYPE="4">tt_keys TYPE HASHED TABLE OF ts_key WITH UNIQUE KEY KEY
`</ITEM>
  </TYPES>
 </RAW>
</ZL_OBJECT>
