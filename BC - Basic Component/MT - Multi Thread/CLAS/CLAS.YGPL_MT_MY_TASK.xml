<?xml version="1.0" encoding="utf-16"?>
<ZL_OBJECT CHECKSUM="0B8CD559C090A9D1CEFCDCC486392CDF" CODE_SIGNATURE="BD62E843C674164D2FEB33A4AA073C00" CONNECTOR="39AC0A4B07A5A05AE1000000AC120173" NAME="YGPL_MT_MY_TASK" TYPE="CLAS" VERSION="1.01">
 <DEPENDENCIES>
  <ITEM TYPE="CLAS" NAME="YGPL_MT_NEW_TASK"/>
 </DEPENDENCIES>
 <DIRECTORY DEVCLASS="YGPL-MULTITHREAD.TUTORIAL" MASTERLANG="E"/>
 <RAW>
  <A0_MAINDATA VERSION="1" LANGU="E" EXPOSURE="2" STATE="1" CLSFINAL="X" CLSCCINCL="X" FIXPT="X" UNICODE="X">
   <INHERITANCE REFCLSNAME="YGPL_MT_NEW_TASK" STATE="1"/>
   <TEXTS>
    <ITEM LANG="E" TEXT="MT Tutorial - My Task"/>
   </TEXTS>
  </A0_MAINDATA>
  <ALIASES>
   <ITEM CMPNAME="MY_CATEGORIES" EXPOSURE="2" REFCLSNAME="YGPL_MT_MY_DATA_DEFINITION" REFCMPNAME="MY_CATEGORIES"/>
   <ITEM CMPNAME="MY_STATUS" EXPOSURE="2" REFCLSNAME="YGPL_MT_MY_DATA_DEFINITION" REFCMPNAME="MY_STATUS"/>
   <ITEM CMPNAME="TD_WAITTIME" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="YGPL_MT_MY_DATA_DEFINITION" REFCMPNAME="TD_WAITTIME"/>
   <ITEM CMPNAME="TS_MY_PROCESS_INFO" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="YGPL_MT_MY_DATA_DEFINITION" REFCMPNAME="TS_MY_PROCESS_INFO"/>
   <ITEM CMPNAME="TS_MY_RUN_PARAMETERS" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="YGPL_MT_MY_DATA_DEFINITION" REFCMPNAME="TS_MY_RUN_PARAMETERS"/>
   <ITEM CMPNAME="TT_DATA" EXPOSURE="2" CMPTYPE="3" REFCLSNAME="YGPL_MT_MY_DATA_DEFINITION" REFCMPNAME="TT_DATA"/>
  </ALIASES>
  <ATTRIBUTS>
   <ITEM CMPNAME="RUN_PARAMETERS" STATE="1" TYPTYPE="1" TYPE="TS_MY_RUN_PARAMETERS">
    <TEXTS>
     <ITEM LANG="E" TEXT="Run parameters"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="T_OBJECTS" STATE="1" TYPTYPE="1" TYPE="TT_DATA">
    <TEXTS>
     <ITEM LANG="E" TEXT="My Objects worklist"/>
    </TEXTS>
   </ITEM>
   <ITEM CMPNAME="WAIT_TIME" STATE="1" TYPTYPE="1" TYPE="TD_WAITTIME">
    <TEXTS>
     <ITEM LANG="E" TEXT="Task wait time"/>
    </TEXTS>
   </ITEM>
  </ATTRIBUTS>
  <INTERFACES>
   <ITEM REFCLSNAME="YGPL_MT_MY_DATA_DEFINITION" EXPOSURE="2" STATE="1" RELTYPE="1"/>
  </INTERFACES>
  <LOCAL>
   <TYPES>`
*&quot;* use this source file for any type declarations (class
*&quot;* definitions, interfaces or data types) you need for method
*&quot;* implementation or private method&apos;s signature</TYPES>
   <IMPLEMENTATIONS>`
*&quot;* local class implementation for public class
*&quot;* use this source file for the implementation part of
*&quot;* local helper classes</IMPLEMENTATIONS>
   <MACROS>`
*&quot;* use this source file for any macro definitions you need
*&quot;* in the implementation part of the class</MACROS>
  </LOCAL>
  <METHODS>
   <ITEM CMPNAME="COMPUTE_WAIT_TIME" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Compute real task wait time based on run wait time"/>
    </TEXTS>
    <SOURCE>`
  data _mini         TYPE p.
  data _amount       TYPE p.

  IF RUN_PARAMETERS-wait_time &lt; 2.
    wait_time = RUN_PARAMETERS-wait_time.
  ELSE.
    _mini = ( RUN_PARAMETERS-wait_time + 1 ) DIV 2.
    _amount = RUN_PARAMETERS-wait_time * 3 / 2.
* Random do not works
*    CALL FUNCTION &apos;RANDOM_P&apos;
*      EXPORTING
*        rnd_min   = _mini
*        rnd_max   = _amount
*      IMPORTING
*        rnd_value = _amount.
    wait_time = _amount + 1.
  ENDIF.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="CONSTRUCTOR" EXPOSURE="2" STATE="1" MTDTYPE="2" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="CONSTRUCTOR"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RUN_ID" CMPTYPE="1" MTDTYPE="2" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_PROCESS_ID">
      <TEXTS>
       <ITEM LANG="E" TEXT="Run Process ID"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="YGPL_MT_CX" LANGU="E" MTDTYPE="2">
      <TEXTS>
       <ITEM LANG="E" TEXT="MultyThread : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA s_paramaters   TYPE ts_my_process_info.
  DATA o_category     TYPE REF TO ygpl_mt_my_categories.
  DATA o_status       TYPE REF TO ygpl_mt_my_status.

* Construct
  super-&gt;constructor( run_id ).
  CREATE OBJECT o_category.     &quot; My categories
  CREATE OBJECT o_status.
  set_category( o_category ).
  set_status( o_status ).
* Initialize
  run_parameters = get_parameters( ).
  compute_wait_time( ).
  s_paramaters-wait_time = wait_time.
  send_parameters( s_paramaters ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="DO_JOB" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Do worklist"/>
    </TEXTS>
    <EXCEPTIONS>
     <ITEM SCONAME="YGPL_MT_CX" LANGU="E">
      <TEXTS>
       <ITEM LANG="E" TEXT="MultyThread : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DO.
* Get data
    _get_batch( CHANGING objects = t_objects ).

    IF t_objects[] IS INITIAL.   EXIT.     ENDIF.

* Process Data
    process_my_objects(  ).

    FREE t_objects.

* Confirm Data
    confirm_batch( ).

  ENDDO.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="DO_RECOVERY" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Do recovery if needed"/>
    </TEXTS>
    <EXCEPTIONS>
     <ITEM SCONAME="YGPL_MT_CX" LANGU="E">
      <TEXTS>
       <ITEM LANG="E" TEXT="MultyThread : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DO.
* Get data
    _get_objects_to_recover( CHANGING objects = t_objects ).

    IF t_objects[] IS INITIAL.   EXIT.     ENDIF.

* Process Data
    process_my_objects( abap_true ).

    FREE t_objects.

* Confirm Data
    confirm_batch( ).

  ENDDO.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_PARAMETERS" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Get run parameters"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TS_MY_RUN_PARAMETERS">
      <TEXTS>
       <ITEM LANG="E" TEXT="Run parameters"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="YGPL_MT_CX" LANGU="E">
      <TEXTS>
       <ITEM LANG="E" TEXT="MultyThread : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  _get_information( EXPORTING category = my_categories-task_param
                     CHANGING     info = result ).</SOURCE>
   </ITEM>
   <ITEM CMPNAME="GET_RUN" EXPOSURE="2" STATE="1">
    <TEXTS>
     <ITEM LANG="E" TEXT="Get run"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RESULT" CMPTYPE="1" PARDECLTYP="3" TYPTYPE="1" TYPE="TO_RUN">
      <TEXTS>
       <ITEM LANG="E" TEXT="Run of the task"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <SOURCE>`
  result = o_run.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="PROCESS_MY_OBJECTS" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Process object set"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="RECOVERY_MODE" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TD_BOOLEAN" PAROPTIONL="X">
      <TEXTS>
       <ITEM LANG="E" TEXT="process worklist in recovery mode"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="YGPL_MT_CX" LANGU="E">
      <TEXTS>
       <ITEM LANG="E" TEXT="MultyThread : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA _count        TYPE i.
  DATA _ctrl         TYPE ygpl_t100t.
  DATA _status       TYPE td_status.
  FIELD-SYMBOLS:
    &lt;obj&gt;   LIKE LINE OF t_objects,
    &lt;lang&gt;  LIKE LINE OF &lt;obj&gt;-lang.

  LOOP AT t_objects ASSIGNING &lt;obj&gt;.
    IF recovery_mode IS NOT INITIAL.
* In recovery mode check for existence first
      SELECT SINGLE arbgb INTO _ctrl-arbgb
        FROM ygpl_t100t
        WHERE arbgb = &lt;obj&gt;-msg.
      IF sy-subrc = 0.
        confirm_objects( system_status-object-already_done ).
        CONTINUE.
      ENDIF.
    ENDIF.
    ADD 1 TO _count.

    _ctrl-arbgb = &lt;obj&gt;-msg.
    READ TABLE &lt;obj&gt;-lang WITH TABLE KEY langu = &apos;E&apos; ASSIGNING &lt;lang&gt;.
    IF sy-subrc = 0.
      _ctrl-stext = &lt;lang&gt;-text.
    ELSE.
      CLEAR _ctrl-stext.
    ENDIF.
    INSERT into ygpl_t100t values _ctrl.
    IF sy-subrc = 0.
      _status = my_status-ok.
    ELSE.
      FORMAT COLOR COL_NEGATIVE ON.
      WRITE:/ _ctrl-arbgb, _ctrl-stext.
      FORMAT COLOR COL_NEGATIVE OFF.
      _status = my_status-ko.
    ENDIF.

    confirm_objects( _status ).

    IF _count &gt;= run_parameters-obj_count.
      CLEAR _count.
      WRITE:/ _ctrl-arbgb, _ctrl-stext.
      confirm_objects( my_status-error ). &quot; error wanted
      WAIT UP TO wait_time SECONDS.
    ENDIF.
  ENDLOOP.</SOURCE>
   </ITEM>
   <ITEM CMPNAME="SEND_PARAMETERS" EXPOSURE="2" STATE="1" MTDNEWEXC="X">
    <TEXTS>
     <ITEM LANG="E" TEXT="Send task specfic parameters"/>
    </TEXTS>
    <PARAMETERS>
     <ITEM SCONAME="PARAMETERS" CMPTYPE="1" PARPASSTYP="1" TYPTYPE="1" TYPE="TS_MY_PROCESS_INFO">
      <TEXTS>
       <ITEM LANG="E" TEXT="Process information"/>
      </TEXTS>
     </ITEM>
    </PARAMETERS>
    <EXCEPTIONS>
     <ITEM SCONAME="YGPL_MT_CX" LANGU="E">
      <TEXTS>
       <ITEM LANG="E" TEXT="MultyThread : Root exception class"/>
      </TEXTS>
     </ITEM>
    </EXCEPTIONS>
    <SOURCE>`
  DATA s_param TYPE ts_my_process_info.
  _send_task_definition( ).
  s_param = parameters.
  s_param-process_id = me-&gt;process_id.
  _send_message( archive = abap_true
                category = my_categories-task_param
                 message = s_param ).</SOURCE>
   </ITEM>
  </METHODS>
  <REDEFINITIONS>
   <ITEM REFCLSNAME="YGPL_MT_NEW_TASK" MTDNAME="NEW_BLOC">
    <SOURCE>`
  CREATE DATA table TYPE tt_data.</SOURCE>
   </ITEM>
   <ITEM REFCLSNAME="YGPL_MT_NEW_TASK" MTDNAME="PROCESS_BATCH">
    <SOURCE>`
  t_objects = objects.
  process_my_objects( ).</SOURCE>
   </ITEM>
  </REDEFINITIONS>
 </RAW>
</ZL_OBJECT>
